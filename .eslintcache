[{"/srv/windows/work/redux-test/src/index.js":"1","/srv/windows/work/redux-test/src/reportWebVitals.js":"2","/srv/windows/work/redux-test/src/App.tsx":"3","/srv/windows/work/redux-test/src/App.reducer.tsx":"4","/srv/windows/work/redux-test/src/App.actions.tsx":"5","/srv/windows/work/redux-test/src/backend/httpGet.tsx":"6","/srv/windows/work/redux-test/src/App.types.ts":"7","/srv/windows/work/redux-test/src/components/UserList/index.tsx":"8","/srv/windows/work/redux-test/src/components/UserList/UserList.component.tsx":"9","/srv/windows/work/redux-test/src/components/UserList/User/index.tsx":"10","/srv/windows/work/redux-test/src/components/UserList/User/User.component.tsx":"11","/srv/windows/work/redux-test/src/components/UserList/User/User.styled.tsx":"12","/srv/windows/work/redux-test/src/components/UserList/UserList.styled.tsx":"13","/srv/windows/work/redux-test/src/components/FilterBlock/index.tsx":"14","/srv/windows/work/redux-test/src/components/FilterBlock/FilterBlock.Component.tsx":"15","/srv/windows/work/redux-test/src/components/FilterBlock/FilterBlock.styled.tsx":"16","/srv/windows/work/redux-test/src/language/language.tsx":"17"},{"size":504,"mtime":1611581981303,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1611578287358,"results":"20","hashOfConfig":"19"},{"size":3372,"mtime":1612371035373,"results":"21","hashOfConfig":"19"},{"size":2695,"mtime":1611698532870,"results":"22","hashOfConfig":"19"},{"size":740,"mtime":1611698286637,"results":"23","hashOfConfig":"19"},{"size":617,"mtime":1611584411116,"results":"24","hashOfConfig":"19"},{"size":339,"mtime":1611583575172,"results":"25","hashOfConfig":"19"},{"size":44,"mtime":1611584887515,"results":"26","hashOfConfig":"19"},{"size":663,"mtime":1611694277287,"results":"27","hashOfConfig":"19"},{"size":40,"mtime":1611585174872,"results":"28","hashOfConfig":"19"},{"size":3610,"mtime":1612371203091,"results":"29","hashOfConfig":"19"},{"size":2215,"mtime":1611702673165,"results":"30","hashOfConfig":"19"},{"size":610,"mtime":1611703205815,"results":"31","hashOfConfig":"19"},{"size":47,"mtime":1611602340395,"results":"32","hashOfConfig":"19"},{"size":5363,"mtime":1611856195472,"results":"33","hashOfConfig":"19"},{"size":2148,"mtime":1611703256715,"results":"34","hashOfConfig":"19"},{"size":1244,"mtime":1611698496598,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"n5kwir",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/srv/windows/work/redux-test/src/index.js",[],["76","77"],"/srv/windows/work/redux-test/src/reportWebVitals.js",[],"/srv/windows/work/redux-test/src/App.tsx",["78","79","80","81","82"],"/* tslint:disable */\nimport React, { useEffect, useReducer, useCallback } from \"react\";\nimport { Redirect, useHistory } from \"react-router\";\nimport { BrowserRouter, Switch, Route, useParams, Link } from \"react-router-dom\";\n//import { ThemeProvider } from \"emotion-theming\";\n//import lighten from \"./styles/themes/lighten\";\n//import darken from \"./styles/themes/darken\";\n\nimport LanguageContext, {englishLang, russianLang} from './language/language';\n\nimport { httpGet } from \"../src/backend/httpGet\";\n\nimport { initialState, reducer } from \"./App.reducer\";\nimport {\n  saveList,\n  setLike,\n  setFilter,\n  setView,\n  setLanguage\n} from \"./App.actions\";\nimport UserList from \"./components/UserList\";\nimport { IFilter, IFullDataUser, IView } from \"./App.types\";\nimport FilterBlock from \"./components/FilterBlock\";\n\nconst App = () => {\n  const [\n    { \n      filteredUsers,\n      filter,\n      view,\n      language\n    }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  const sendToServer = (\n    param: string,\n    url: string,\n  ) => {\n  httpGet(url)\n      .then(\n        (response: any) => {\n          const res = JSON.parse(response);\n          switch(param){\n            case 'users':{\n              dispatch(saveList(res))\n            }\n          }\n        },\n        error => console.error(error)\n      )\n      .catch(function(err) {\n        console.error(err);\n      });\n  };\n\n  async function startProject(){\n    sendToServer(\"users\",`${process.env.PUBLIC_URL}/assets/data.json`);\n  }\n  useEffect(() => {\n    startProject();\n  }, [1]);\n\n  \n\n  const MainPage = () => {\n    let { sort, direction, display } = useParams<{sort:'id'|'name'|'age', direction:'up'|'down', display:'table'|'preview'}>();\n    let history = useHistory();\n    \n    window.onload =(e:Event)=>{\n      dispatch(setFilter({sortBy:sort, direction, searchedWord:''}));\n      dispatch(setView({view:display}))\n    }\n\n    const onLike = (updatedUser:IFullDataUser)=>{\n      console.log(updatedUser);\n      dispatch(setLike(updatedUser));\n    }\n\n    const onFilter=(updatedfilter: IFilter)=>{\n      history.push('/'+updatedfilter.sortBy+'&'+updatedfilter.direction+'&'+view.view)\n      dispatch(setFilter(updatedfilter));\n    }\n\n    const onView = (updatedView:IView)=>{\n      history.push('/'+filter.sortBy+'&'+filter.direction+'&'+updatedView.view)\n      dispatch(setView(updatedView));\n    }\n\n    const onSearch = (e: string)=> {\n      console.log(e);\n      dispatch(setFilter({...filter, searchedWord:e}));\n    }\n\n    return(\n      <div>\n        <FilterBlock \n          initFilter={filter} \n          initView={view} \n          onChangeFilter={onFilter} \n          onChangeView={onView}\n          onSearchChange={onSearch}\n          onLangChange={e=>dispatch(setLanguage(e? 'English':'Russian'))}\n          />\n        <UserList \n          data={filteredUsers} \n          view={view}\n          onLike={onLike}\n          />\n      </div>\n      \n    )\n  };\n\n  return (\n    <LanguageContext.Provider value={language=='Russian'? russianLang: englishLang}>\n      <BrowserRouter basename={`${process.env.PUBLIC_URL}/`}>\n        <Switch>\n          <Route exact={true} path='/' render={()=><Redirect to='/id&up&table'/>}/>\n          <Route path=\"/:sort&:direction&:display\" component={MainPage}/>\n        </Switch>\n      </BrowserRouter>\n    </LanguageContext.Provider>\n  )\n};\n\nexport default App;",["83","84"],"/srv/windows/work/redux-test/src/App.reducer.tsx",["85","86","87","88","89"],"/* tslint:disable */\nimport {\n  IAppState,\n  IFilter,\n  IFullDataUser,\n  IGetUsersAction,\n  ISetFilterAction,\n  ISetLanguageAction,\n  ISetLikeAction,\n  ISetViewAction,\n  IView\n} from \"./App.types\";\n\nconst defaultUser:IFullDataUser[]= [{\n  \"id\": 0,\n  \"favourite\": false,\n  \"name\": \"Gilbert Morton\",\n  \"age\": 30,\n  \"phone\": \"(369) 432-9206\",\n  \"image\": \"sheep\",\n  \"phrase\": \"Japman somam mes lizmasapa om zefopi ki wa ogju mofrajnir denba uc famoso opeipu woul.\",\n  \"video\": \"shoe\"\n}];\n\nconst defaultFilter: IFilter={\n  sortBy: 'id',\n  direction: 'up',\n  searchedWord: ''\n};\n\nconst defaultView: IView={\n  view: 'table'\n}\n\n\nexport type IAppActions =\n  IGetUsersAction\n| ISetLikeAction\n| ISetFilterAction\n| ISetViewAction\n| ISetLanguageAction;\n\nconst initialState: IAppState = {\n  users: defaultUser,\n  filteredUsers: [],\n  filter: defaultFilter,\n  view: defaultView,\n  language: 'Russian'\n};\n\n\nconst reducer = (state: IAppState, action: IAppActions) => {\n  switch (action.type) {\n    case 'getUserList':{\n      console.log(\"saving users to reducer\");\n      return{\n        ...state,\n        users: action.userList,\n        filteredUsers: action.userList\n      }\n    }\n    case 'setLike':{\n      var newState = state.filteredUsers.map(user=>user.id===action.user.id? action.user: user)\n      return{\n        ...state,\n        filteredUsers:newState\n      }\n    }\n    case 'setFilter':{\n      console.log(action.newFilter);\n      if(action.newFilter.searchedWord.length<1){\n        var sortedFilteredUsers = state.users.sort((a,b)=>{\n          if(a[action.newFilter.sortBy]<b[action.newFilter.sortBy]) return action.newFilter.direction=='up'?-1: 1;\n          if(a[action.newFilter.sortBy]>b[action.newFilter.sortBy]) return action.newFilter.direction=='up'? 1: -1;\n          return 0\n        })\n      }\n      else{\n        var sortedFilteredUsers = state.users\n          .filter(user=> user.name.toLowerCase().includes(action.newFilter.searchedWord.toLowerCase()))\n          .sort((a,b)=>{\n            if(a[action.newFilter.sortBy]<b[action.newFilter.sortBy]) return action.newFilter.direction=='up'?-1: 1;\n            if(a[action.newFilter.sortBy]>b[action.newFilter.sortBy]) return action.newFilter.direction=='up'? 1: -1;\n            return 0\n          })\n      }\n      return{\n        ...state,\n        filteredUsers: sortedFilteredUsers,\n        filter: action.newFilter\n      }\n    }\n    case 'setView':{\n      console.log(action.newView)\n      return{\n        ...state,\n        view: action.newView\n      }\n    }\n    case 'setLang':{\n      return{\n        ...state,\n        language: action.lang\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport { initialState, reducer };\n","/srv/windows/work/redux-test/src/App.actions.tsx",[],"/srv/windows/work/redux-test/src/backend/httpGet.tsx",[],"/srv/windows/work/redux-test/src/App.types.ts",[],"/srv/windows/work/redux-test/src/components/UserList/index.tsx",[],"/srv/windows/work/redux-test/src/components/UserList/UserList.component.tsx",[],"/srv/windows/work/redux-test/src/components/UserList/User/index.tsx",[],"/srv/windows/work/redux-test/src/components/UserList/User/User.component.tsx",["90","91","92"],"import React, { useContext, useRef } from 'react'\nimport { IFullDataUser, IView } from '../../../App.types';\n\nimport { ILanguage } from '../../../language/language.type';\nimport LanguageContext from '../../../language/language';\n\nimport {ReactComponent as LikeIcon} from './like.svg';\n\nimport {\n    UserRow, \n    Delimeter,\n    LeftRowBlock, \n    CenterRowBlock, \n    RightRowBlock, \n    UserPreviewContainer,\n    UserPreviewLeftBlock,\n    UserPreviewRightBlock,\n    UserPreviewHeaderBlock,\n    UserPreviewBodyBlock\n} from './User.styled';\n\n\ninterface IUser{\n    display: IView;\n    userData: IFullDataUser;\n    onlike: (updatedUser:IFullDataUser)=>void;\n}\n\nconst User = ({display, userData, onlike}:IUser)=>{\n    const postContainerRef = useRef<HTMLDivElement>(null);\n    const language = useContext<ILanguage>(LanguageContext)\n\n    const onLike =(user: IFullDataUser)=>{\n        user.favourite= user.favourite== true? false: true;\n        onlike(user);\n    }\n\n    return display.view=='table'?(\n            <UserRow>\n                <LeftRowBlock>\n                    <div className='avatar'>\n                        <img src={`${process.env.PUBLIC_URL}/assets/images/${userData.image}.svg`} alt='avatar'/>\n                    </div>\n                    <div className='name'>\n                        {userData.name}\n                    </div>\n                </LeftRowBlock>\n                <CenterRowBlock>{userData.age} {language.otherElements.ageUser}</CenterRowBlock>\n                <RightRowBlock>\n                    <div className='phone'>\n                    {userData.phone}\n                    </div>\n                    <div className='rate'>\n                        <LikeIcon\n                            fill={userData.favourite? 'indigo': 'transparent'}\n                            width='1em'\n                            height='1em'\n                            onClick={()=>onLike(userData)}\n                        />\n                    </div>\n                </RightRowBlock>\n            </UserRow>\n    ):(\n        <UserPreviewContainer ref={postContainerRef} isContainVideo={userData.video? true: false}>\n            <UserPreviewLeftBlock parentWidth={postContainerRef.current?.offsetWidth}>\n                <UserPreviewHeaderBlock>\n                    <div className='avatar'>\n                        <img src={`${process.env.PUBLIC_URL}/assets/images/${userData.image}.svg`} alt='avatar'/>\n                    </div>\n                    <div className='name'>\n                        {userData.name}\n                    </div>\n                    <div className='rate'>\n                        <LikeIcon\n                            fill={userData.favourite? 'indigo': 'transparent'}\n                            width='1em'\n                            height='1em'\n                            onClick={()=>onLike(userData)}\n                        />\n                    </div>\n                </UserPreviewHeaderBlock>\n                <UserPreviewBodyBlock>\n                    <p>{userData.age} лет</p>\n                    <p>{userData.phone}</p>\n                    <p>{userData.phrase}</p>\n                </UserPreviewBodyBlock>\n            </UserPreviewLeftBlock>\n            \n            {userData.video?\n            (\n                <UserPreviewRightBlock parentWidth={postContainerRef.current?.offsetWidth}>\n                    <video className='videoBlock' controls src={`${process.env.PUBLIC_URL}/assets/videos/${userData.video}.mp4`}/>\n                </UserPreviewRightBlock>\n            ):null\n            }\n        </UserPreviewContainer>\n    )\n}\n\nexport default User","/srv/windows/work/redux-test/src/components/UserList/User/User.styled.tsx",[],"/srv/windows/work/redux-test/src/components/UserList/UserList.styled.tsx",[],"/srv/windows/work/redux-test/src/components/FilterBlock/index.tsx",[],"/srv/windows/work/redux-test/src/components/FilterBlock/FilterBlock.Component.tsx",["93","94"],"import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { IFilter, IView } from '../../App.types';\nimport { ILanguage } from '../../language/language.type';\nimport LanguageContext from '../../language/language';\n\nimport {\n    Label, \n    FilterContainer, \n    FilterLeftSubContainer, \n    FilterRightSubContainer, \n    FilterButtonBlock, \n    FilterButton,\n    FilterSearchBlock\n} from './FilterBlock.styled'\n\ninterface IFilterBlock {\n    initFilter: IFilter;\n    initView: IView;\n    onChangeFilter:(filter: IFilter)=>void;\n    onChangeView: (view:IView)=> void;\n    onSearchChange: (e: string)=> void;\n    onLangChange: (e: boolean)=> void;\n}\n\nconst FilterBlock = ({\n    initFilter, \n    initView, \n    onChangeFilter, \n    onChangeView, \n    onSearchChange,\n    onLangChange\n}:IFilterBlock)=>{\n\n    const language = useContext<ILanguage>(LanguageContext)\n    console.log(initFilter);\n    console.log(initView);\n\n    const [inputValue, setInputValue] = useState(initFilter.searchedWord);\n\n    const timerHandler = useRef<any>();\n\n    return(\n        <FilterContainer>\n            <FilterLeftSubContainer>\n                <Label>{language.label.sortLabel}</Label>\n                <FilterButtonBlock>\n                    <FilterButton checked={initFilter.sortBy==='id'}>\n                        <span>{language.buttonsSort.buttonID}</span>\n                        <input type='radio' name='filter' value='id'\n                            onChange={()=>onChangeFilter({...initFilter, sortBy:'id'})}\n                        />\n                    </FilterButton>\n                    <FilterButton checked={initFilter.sortBy==='name'}>\n                        <span>{language.buttonsSort.buttonName}</span>\n                        <input type='radio' name='filter' value='name'\n                            onChange={()=>onChangeFilter({...initFilter, sortBy:'name'})}\n                        />\n                    </FilterButton>\n                    <FilterButton checked={initFilter.sortBy==='age'} >\n                        <span>{language.buttonsSort.buttonAge}</span>\n                        <input type='radio' name='filter' value='age'\n                            onChange={()=>onChangeFilter({...initFilter, sortBy: 'age'})}\n                        />\n                    </FilterButton>\n                </FilterButtonBlock>\n\n                <FilterButtonBlock>\n                    <FilterButton checked={initFilter.direction==='up'} >\n                        <span>{language.buttonsSort.buttonDirectionUp}</span>\n                        <input type='radio' name='filter' value='up'\n                            onChange={()=>onChangeFilter({...initFilter, direction:'up'})}\n                        />\n                    </FilterButton>\n                    <FilterButton checked={initFilter.direction==='down'} >\n                        <span>{language.buttonsSort.buttonDirectionDown}</span>\n                        <input type='radio' name='filter' value='down'\n                            onChange={()=>onChangeFilter({...initFilter, direction:'down'})}\n                        />\n                    </FilterButton>\n                </FilterButtonBlock>    \n            </FilterLeftSubContainer>\n            \n            <FilterRightSubContainer>\n                <Label>{language.label.viewLabel}</Label>\n                <FilterButtonBlock>\n                    <FilterButton checked={initView.view==='table'} >\n                        <span>{language.buttonsView.buttonTable}</span>\n                        <input type='radio' name='view' value='table'\n                            onChange={()=>onChangeView({...initView, view:'table'})}\n                        />\n                    </FilterButton>\n                    <FilterButton checked={initView.view==='preview'} >\n                        <span>{language.buttonsView.buttonPreview}</span>\n                        <input type='radio' name='view' value='preview'\n                            onChange={()=>onChangeView({...initView, view:'preview'})}\n                        />\n                    </FilterButton>\n                </FilterButtonBlock>\n                <FilterSearchBlock>\n                    <input type='text' placeholder={language.otherElements.searchPlaceholder}\n                        value={inputValue}  \n                        autoFocus\n                        onChange={(e)=>{\n                            clearTimeout(timerHandler.current);\n                            setInputValue(e.currentTarget.value);\n                            const pendingValue = e.currentTarget.value;\n                            timerHandler.current = setTimeout(()=>{\n                                onSearchChange(pendingValue)\n                            }, 1000)\n                            \n                        }}\n                    />\n                    <div className='language'>\n                    <input type='checkbox' \n                        name='lang' \n                        checked={language.otherElements.searchPlaceholder=='Search...'}\n                        onChange={(e)=>onLangChange(e.currentTarget.checked)}/>\n                    <label htmlFor='lang'>English</label>\n                    </div>\n                </FilterSearchBlock> \n            </FilterRightSubContainer>\n\n        </FilterContainer>\n        \n    )\n}\n\nexport default FilterBlock","/srv/windows/work/redux-test/src/components/FilterBlock/FilterBlock.styled.tsx",[],"/srv/windows/work/redux-test/src/language/language.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":2,"column":40,"nodeType":"101","messageId":"102","endLine":2,"endColumn":51},{"ruleId":"99","severity":1,"message":"103","line":4,"column":51,"nodeType":"101","messageId":"102","endLine":4,"endColumn":55},{"ruleId":"104","severity":1,"message":"105","line":63,"column":6,"nodeType":"106","endLine":63,"endColumn":9,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":63,"column":7,"nodeType":"109","endLine":63,"endColumn":8},{"ruleId":"110","severity":1,"message":"111","line":117,"column":46,"nodeType":"112","messageId":"113","endLine":117,"endColumn":48},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"110","severity":1,"message":"111","line":73,"column":102,"nodeType":"112","messageId":"113","endLine":73,"endColumn":104},{"ruleId":"110","severity":1,"message":"111","line":74,"column":102,"nodeType":"112","messageId":"113","endLine":74,"endColumn":104},{"ruleId":"114","severity":1,"message":"115","line":79,"column":13,"nodeType":"101","messageId":"116","endLine":79,"endColumn":32},{"ruleId":"110","severity":1,"message":"111","line":82,"column":104,"nodeType":"112","messageId":"113","endLine":82,"endColumn":106},{"ruleId":"110","severity":1,"message":"111","line":83,"column":104,"nodeType":"112","messageId":"113","endLine":83,"endColumn":106},{"ruleId":"99","severity":1,"message":"117","line":11,"column":5,"nodeType":"101","messageId":"102","endLine":11,"endColumn":14},{"ruleId":"110","severity":1,"message":"111","line":34,"column":39,"nodeType":"112","messageId":"113","endLine":34,"endColumn":41},{"ruleId":"110","severity":1,"message":"111","line":38,"column":24,"nodeType":"112","messageId":"113","endLine":38,"endColumn":26},{"ruleId":"99","severity":1,"message":"118","line":1,"column":29,"nodeType":"101","messageId":"102","endLine":1,"endColumn":38},{"ruleId":"110","severity":1,"message":"111","line":116,"column":74,"nodeType":"112","messageId":"113","endLine":116,"endColumn":76},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startProject'. Either include it or remove the dependency array.","ArrayExpression",["121"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-redeclare","'sortedFilteredUsers' is already defined.","redeclared","'Delimeter' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [startProject]",{"range":"124","text":"125"},[1548,1551],"[startProject]"]